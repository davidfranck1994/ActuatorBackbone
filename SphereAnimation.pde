
import toxi.geom.*;
import toxi.processing.*;
import controlP5.*;

ControlP5 cp5;

float[] inX = { -24.599, -7.601, -15.51, 19.901, -7.601, -50.192, 19.901, -15.51, 40.606, 40.606, 65.544, 84.85, 65.544, 34.973, 34.973, 84.85, 5.536, -1.838, -43.93, 54.278, 101.79, 101.79, 114.09, 114.09, 79.216, 79.216, 92.381, 45.206, 17.704, 13.006, -30.258, 57.505, 121.691, 109.945, 125.455, 109.945, 114.503, 79.374, 83.931, 37.605, 38.768, -11.424, -62.123, -51.304, -85.985, -62.123, -35.286, -73.851, -90.849, -78.549, -106.052, -97.917, -13.165, -60.89, -62.63, -98.45, -117.006, -101.496, -43.93, -85.985, -51.304, 5.536, -114.189, -90.849, -73.851, -106.052, -78.549, -30.258, -122.639, -117.006, -122.639, -98.45, -60.89, -101.496, -1.838, 54.278, -35.286, 17.704, 45.206, 13.006, 57.505, -62.63, -11.424, -13.165, 37.605, 38.768, 79.374, 92.381, 83.931, 114.503, 78.549, 98.45, 60.89, 73.851, 106.052, 101.496, 90.849, 117.006, 85.985, 51.304, 62.63, 35.286, 122.639, 114.189, 13.165, 122.639, -13.006, -37.605, -38.768, -57.505, -17.704, 11.424, -45.206, 1.838, -54.278, -79.374, -83.931, -92.381, -114.503, -101.79, -101.79, -84.85, -114.09, -114.09, -84.85, -121.691, -109.945, -125.455, -109.945, -114.503, -92.381, -83.931, -45.206, -17.704, -54.278, -57.505, -13.006, 1.838, -37.605, 11.424, -38.768, -79.374, 13.165, 35.286, 62.63, 106.052, 98.45, 117.006, 90.849, 78.549, 101.496, 73.851, 60.89, 51.304, 85.985, 30.258, -5.536, 43.93, -79.216, -65.544, -34.973, -79.216, -34.973, -65.544, 30.258, 43.93, -5.536, 97.917, 62.123, 62.123, 7.601, -19.901, 15.51, 24.599, -19.901, -40.606, 7.601, -40.606, 15.51, 50.192, -98.225, -96.428, -96.428, -89.872, -89.872, -89.443, -83.315, -83.315, -79.465, -79.465, -79.264, -79.264, -72.361, -72.361, -68.656, -66.152, -66.152, -60.706, -55.544, -55.544, -55.544, -55.544, -49.112, -49.112, -48.988, -48.988, -44.936, -44.936, -34.328, -30.353, -30.353, -27.772, -27.772, -27.639, -27.639, -21.216, -21.216, -18.759, -18.759, -10.608, -10.608, -10.608, -10.608, -6.556, -6.556, 0.0, 0.0, 6.556, 6.556, 10.608, 10.608, 10.608, 10.608, 18.759, 18.759, 21.216, 21.216, 27.639, 27.639, 27.772, 27.772, 30.353, 30.353, 34.328, 44.936, 44.936, 48.988, 48.988, 49.112, 49.112, 55.544, 55.544, 55.544, 55.544, 60.706, 66.152, 66.152, 68.656, 72.361, 72.361, 79.264, 79.264, 79.465, 79.465, 83.315, 83.315, 89.443, 89.872, 89.872, 96.428, 96.428, 98.225

};

float[] inY = {0.0, 23.395, 47.735, 14.459, -23.395, 0.0, -14.459, -47.735, -29.502, 29.502, 15.476, 29.502, -15.476, 57.554, -57.554, -29.502, 67.119, 89.813, 51.046, 71.58, -14.459, 14.459, -23.395, 23.395, 57.554, -57.554, 67.119, 92.34, 101.276, 115.735, 93.124, 101.276, 0.0, -47.735, 0.0, 47.735, 51.046, 89.813, 93.124, 115.735, 119.315, 119.315, 26.006, 73.741, 26.006, -26.006, 108.6, 71.528, 48.133, 85.987, 48.133, 0.0, 124.673, 103.243, 108.6, 71.528, 26.006, 73.741, -51.046, -26.006, -73.741, -67.119, 0.0, -48.133, -71.528, -48.133, -85.987, -93.124, 26.006, -26.006, -26.006, -71.528, -103.243, -73.741, -89.813, -71.58, -108.6, -101.276, -92.34, -115.735, -101.276, -108.6, -119.315, -124.673, -115.735, -119.315, -89.813, -67.119, -93.124, -51.046, 85.987, 71.528, 103.243, 71.528, 48.133, 73.741, 48.133, 26.006, 26.006, 73.741, 108.6, 108.6, 26.006, 0.0, 124.673, -26.006, 115.735, 115.735, 119.315, 101.276, 101.276, 119.315, 92.34, 89.813, 71.58, 89.813, 93.124, 67.119, 51.046, -14.459, 14.459, 29.502, 23.395, -23.395, -29.502, 0.0, -47.735, 0.0, 47.735, -51.046, -67.119, -93.124, -92.34, -101.276, -71.58, -101.276, -115.735, -89.813, -115.735, -119.315, -119.315, -89.813, -124.673, -108.6, -108.6, -48.133, -71.528, -26.006, -48.133, -85.987, -73.741, -71.528, -103.243, -73.741, -26.006, 93.124, 67.119, 51.046, 57.554, 15.476, 57.554, -57.554, -57.554, -15.476, -93.124, -51.046, -67.119, 0.0, 26.006, -26.006, -23.395, -14.459, -47.735, 0.0, 14.459, -29.502, 23.395, 29.502, 47.735, 0.0, 0.0, -20.177, 20.177, -40.355, 40.355, 0.0, -20.177, 20.177, -57.735, 57.735, -32.648, 32.648, -52.573, 52.573, 0.0, -73.003, 73.003, 0.0, -65.295, -40.355, 40.355, 65.295, -35.682, 35.682, -85.473, 85.473, -73.003, 73.003, 0.0, -93.417, 93.417, -20.177, 20.177, -85.065, 85.065, -65.295, 65.295, -57.735, 57.735, -97.943, -32.648, 32.648, 97.943, -85.473, 85.473, 0.0, 0.0, -85.473, 85.473, -97.943, -32.648, 32.648, 97.943, -57.735, 57.735, -65.295, 65.295, -85.065, 85.065, -20.177, 20.177, -93.417, 93.417, 0.0, -73.003, 73.003, -85.473, 85.473, -35.682, 35.682, -65.295, -40.355, 40.355, 65.295, 0.0, -73.003, 73.003, 0.0, -52.573, 52.573, -32.648, 32.648, -57.735, 57.735, -20.177, 20.177, 0.0, -40.355, 40.355, -20.177, 20.177, 0.0

};

float[] inZ = {123.755, 123.755, 115.168, 123.755, 123.755, 115.168, 123.755, 115.168, 115.168, 115.168, 106.053, 87.823, 106.053, 106.053, 106.053, 87.823, 106.053, 87.823, 106.053, 87.823, 73.145, 73.145, 48.546, 48.546, 78.709, 78.709, 52.38, 73.145, 73.145, 48.546, 78.709, 48.546, 33.343, 37.632, 6.612, 37.632, 8.136, 37.632, 8.136, 33.343, 6.612, 37.632, 106.053, 87.823, 87.823, 106.053, 52.38, 73.145, 73.145, 48.546, 48.546, 78.709, 8.136, 37.632, 8.136, 33.343, 37.632, 6.612, 106.053, 87.823, 87.823, 106.053, 52.38, 73.145, 73.145, 48.546, 48.546, 78.709, 8.136, 37.632, 8.136, 33.343, 37.632, 6.612, 87.823, 87.823, 52.38, 73.145, 73.145, 48.546, 48.546, 8.136, 37.632, 8.136, 33.343, 6.612, 37.632, 52.38, 8.136, 8.136, -48.546, -33.343, -37.632, -73.145, -48.546, -6.612, -73.145, -37.632, -87.823, -87.823, -8.136, -52.38, -8.136, -52.38, -8.136, -8.136, -48.546, -33.343, -6.612, -48.546, -73.145, -37.632, -73.145, -87.823, -87.823, -37.632, -8.136, -52.38, -8.136, -73.145, -73.145, -87.823, -48.546, -48.546, -87.823, -33.343, -37.632, -6.612, -37.632, -8.136, -52.38, -8.136, -73.145, -73.145, -87.823, -48.546, -48.546, -87.823, -33.343, -37.632, -6.612, -37.632, -8.136, -52.38, -8.136, -48.546, -33.343, -37.632, -73.145, -48.546, -6.612, -73.145, -37.632, -87.823, -87.823, -78.709, -106.053, -106.053, -78.709, -106.053, -106.053, -78.709, -106.053, -106.053, -78.709, -106.053, -106.053, -78.709, -106.053, -106.053, -123.755, -123.755, -115.168, -123.755, -123.755, -115.168, -123.755, -115.168, -115.168, -115.168, 18.759, -17.164, -17.164, 17.164, 17.164, -44.721, 51.492, 51.492, -18.759, -18.759, -51.492, -51.492, 44.721, 44.721, -72.708, 17.164, 17.164, 79.465, -51.492, 72.708, 72.708, -51.492, -79.465, -79.465, -17.164, -17.164, 51.492, 51.492, -93.923, 18.759, 18.759, 93.923, 93.923, -44.721, -44.721, -72.708, -72.708, 79.465, 79.465, -17.164, -93.923, -93.923, -17.164, 51.492, 51.492, 100.0, -100.0, -51.492, -51.492, 17.164, 93.923, 93.923, 17.164, -79.465, -79.465, 72.708, 72.708, 44.721, 44.721, -93.923, -93.923, -18.759, -18.759, 93.923, -51.492, -51.492, 17.164, 17.164, 79.465, 79.465, 51.492, -72.708, -72.708, 51.492, -79.465, -17.164, -17.164, 72.708, -44.721, -44.721, 51.492, 51.492, 18.759, 18.759, -51.492, -51.492, 44.721, -17.164, -17.164, 17.164, 17.164, -18.759

};

int[][] topo = {{5, 4, 1, 211, 225, 212}, {2, 0, 3, 212, 225, 231}, {18, 1, 16, 212, 231, 218}, {1, 6, 9, 225, 243, 231}, {0, 7, 6, 211, 230, 225}, {42, 45, 0, 197, 211, 212}, {3, 4, 8, 225, 230, 243}, {4, 58, 61, 211, 217, 230}, {6, 14, 12, 230, 248, 243}, {13, 3, 10, 231, 243, 249}, {9, 12, 11, 243, 257, 249}, {24, 10, 21, 249, 257, 261}, {10, 8, 15, 243, 248, 257}, {16, 9, 19, 231, 249, 236}, {8, 61, 75, 230, 235, 248}, {12, 25, 20, 248, 260, 257}, {17, 2, 13, 218, 231, 236}, {30, 16, 28, 218, 236, 224}, {43, 42, 2, 200, 212, 218}, {27, 13, 24, 236, 249, 253}, {21, 15, 22, 257, 260, 266}, {11, 20, 23, 257, 266, 261}, {20, 33, 32, 260, 269, 266}, {35, 21, 32, 261, 266, 270}, {19, 11, 26, 249, 261, 253}, {15, 75, 87, 248, 250, 260}, {37, 24, 35, 253, 261, 263}, {28, 19, 31, 236, 253, 238}, {29, 17, 27, 224, 236, 238}, {41, 28, 39, 224, 238, 232}, {46, 43, 17, 207, 218, 224}, {39, 27, 37, 238, 253, 247}, {23, 22, 34, 266, 269, 270}, {22, 87, 89, 260, 262, 269}, {32, 105, 102, 269, 271, 270}, {26, 23, 36, 261, 270, 263}, {95, 35, 102, 263, 270, 268}, {38, 31, 26, 247, 253, 263}, {100, 37, 95, 247, 263, 256}, {40, 29, 31, 232, 238, 247}, {104, 39, 100, 232, 247, 242}, {52, 46, 29, 210, 224, 232}, {44, 5, 18, 197, 212, 200}, {47, 18, 30, 200, 218, 207}, {48, 51, 42, 187, 197, 200}, {5, 59, 58, 197, 199, 211}, {53, 30, 41, 207, 224, 210}, {49, 48, 43, 193, 200, 207}, {50, 44, 47, 187, 200, 193}, {55, 47, 53, 193, 207, 196}, {55, 56, 48, 184, 187, 193}, {62, 59, 44, 186, 197, 187}, {108, 41, 104, 210, 232, 222}, {54, 49, 46, 196, 207, 210}, {116, 53, 108, 196, 210, 205}, {57, 50, 49, 184, 193, 196}, {68, 62, 50, 180, 187, 184}, {118, 55, 116, 184, 196, 189}, {45, 60, 7, 199, 217, 211}, {51, 63, 45, 186, 199, 197}, {58, 64, 67, 199, 206, 217}, {7, 74, 14, 217, 235, 230}, {56, 69, 51, 180, 186, 187}, {59, 65, 64, 186, 192, 199}, {63, 66, 60, 192, 206, 199}, {69, 71, 63, 183, 192, 186}, {64, 71, 72, 192, 195, 206}, {60, 76, 74, 206, 223, 217}, {127, 56, 118, 180, 184, 182}, {62, 70, 65, 180, 183, 186}, {69, 127, 129, 180, 181, 183}, {65, 73, 66, 183, 195, 192}, {66, 81, 76, 195, 209, 206}, {71, 129, 131, 183, 188, 195}, {61, 67, 77, 217, 223, 235}, {14, 78, 25, 235, 250, 248}, {67, 72, 82, 206, 209, 223}, {74, 79, 78, 223, 237, 235}, {75, 77, 80, 235, 237, 250}, {77, 82, 84, 223, 229, 237}, {78, 84, 86, 237, 246, 250}, {72, 131, 140, 195, 204, 209}, {76, 83, 79, 209, 229, 223}, {82, 140, 142, 209, 219, 229}, {79, 85, 80, 229, 246, 237}, {84, 142, 144, 229, 241, 246}, {80, 88, 87, 246, 262, 250}, {25, 86, 33, 250, 262, 260}, {86, 144, 150, 246, 255, 262}, {33, 150, 105, 262, 267, 269}, {93, 92, 91, 245, 256, 259}, {90, 95, 94, 256, 268, 259}, {101, 100, 90, 242, 256, 245}, {99, 90, 96, 245, 259, 252}, {96, 91, 97, 259, 268, 265}, {91, 38, 36, 256, 263, 268}, {98, 93, 94, 252, 259, 265}, {103, 94, 102, 265, 268, 271}, {168, 96, 167, 252, 265, 254}, {157, 155, 93, 234, 245, 252}, {92, 40, 38, 242, 247, 256}, {155, 111, 92, 228, 242, 245}, {97, 36, 34, 268, 270, 271}, {147, 167, 97, 264, 265, 271}, {111, 52, 40, 222, 232, 242}, {89, 147, 34, 267, 271, 269}, {110, 107, 111, 214, 222, 228}, {109, 108, 106, 205, 222, 214}, {107, 54, 52, 205, 210, 222}, {112, 115, 107, 201, 205, 214}, {112, 106, 113, 214, 228, 216}, {106, 104, 101, 222, 242, 228}, {114, 109, 110, 201, 214, 216}, {156, 110, 155, 216, 228, 234}, {158, 112, 160, 201, 216, 203}, {117, 116, 109, 189, 205, 201}, {115, 57, 54, 189, 196, 205}, {128, 115, 158, 189, 201, 191}, {128, 68, 57, 182, 184, 189}, {123, 120, 124, 185, 194, 190}, {119, 122, 121, 185, 191, 194}, {120, 158, 159, 191, 203, 194}, {125, 128, 120, 182, 191, 185}, {126, 125, 119, 181, 185, 190}, {161, 119, 163, 190, 194, 202}, {123, 127, 122, 181, 182, 185}, {129, 123, 130, 181, 190, 188}, {70, 68, 125, 180, 182, 181}, {122, 118, 117, 182, 189, 191}, {70, 126, 73, 181, 188, 183}, {141, 126, 161, 188, 190, 198}, {73, 141, 81, 188, 204, 195}, {135, 134, 133, 198, 215, 213}, {136, 132, 137, 213, 215, 227}, {132, 161, 162, 198, 202, 215}, {141, 132, 138, 198, 213, 204}, {138, 133, 139, 213, 227, 219}, {133, 166, 164, 215, 233, 227}, {140, 135, 136, 204, 213, 219}, {142, 136, 143, 219, 227, 241}, {81, 138, 83, 204, 219, 209}, {131, 130, 135, 188, 198, 204}, {83, 139, 85, 219, 241, 229}, {139, 164, 152, 227, 244, 241}, {85, 152, 88, 241, 255, 246}, {146, 148, 147, 258, 264, 267}, {150, 149, 145, 255, 258, 267}, {145, 103, 105, 264, 271, 267}, {151, 154, 145, 251, 264, 258}, {152, 151, 146, 244, 258, 255}, {88, 146, 89, 255, 267, 262}, {149, 153, 148, 244, 251, 258}, {144, 143, 149, 241, 244, 255}, {164, 165, 151, 233, 251, 244}, {148, 169, 167, 251, 254, 264}, {113, 101, 99, 228, 245, 234}, {160, 113, 178, 216, 234, 221}, {178, 99, 168, 234, 252, 240}, {121, 117, 114, 191, 201, 203}, {163, 121, 177, 194, 203, 208}, {177, 114, 156, 203, 216, 221}, {130, 124, 134, 190, 202, 198}, {134, 175, 166, 202, 220, 215}, {124, 159, 175, 194, 208, 202}, {143, 137, 153, 227, 233, 244}, {153, 172, 169, 233, 239, 251}, {137, 162, 172, 215, 220, 233}, {154, 98, 103, 254, 265, 264}, {179, 157, 98, 240, 252, 254}, {165, 179, 154, 239, 254, 251}, {172, 171, 173, 220, 226, 239}, {175, 174, 170, 208, 226, 220}, {166, 170, 165, 220, 239, 233}, {170, 176, 179, 226, 240, 239}, {171, 177, 176, 208, 221, 226}, {162, 163, 171, 202, 208, 220}, {174, 178, 173, 221, 240, 226}, {159, 160, 174, 203, 221, 208}, {176, 156, 157, 221, 234, 240}, {169, 173, 168, 239, 240, 254}, {187, 184, 186, 182, 183, 181}, {180, 183, 185, 190, 182, 188}, {184, 180, 189, 191, 185, 181}, {192, 186, 180, 181, 195, 188}, {187, 193, 196, 180, 189, 182}, {194, 190, 191, 182, 181}, {197, 187, 199, 180, 192, 183}, {197, 200, 193, 184, 186, 180}, {183, 195, 190, 181, 198, 204}, {196, 184, 205, 201, 191, 182}, {194, 185, 181, 202, 188, 198}, {201, 189, 185, 194, 203, 182}, {186, 199, 206, 183, 195}, {200, 207, 187, 196, 184}, {185, 190, 191, 203, 202, 208}, {192, 206, 183, 209, 188, 204}, {207, 193, 210, 205, 184, 189}, {211, 212, 200, 187, 199, 186}, {190, 188, 215, 213, 202, 204}, {197, 211, 217, 186, 206, 192}, {212, 218, 197, 207, 187, 193}, {205, 214, 216, 203, 189, 191}, {194, 190, 198, 215, 220, 208}, {216, 201, 191, 194, 208, 221}, {195, 209, 188, 213, 198, 219}, {210, 196, 222, 214, 201, 189}, {199, 217, 192, 195, 223, 209}, {218, 224, 200, 210, 193, 196}, {203, 194, 202, 226, 220, 221}, {195, 206, 223, 204, 229, 219}, {224, 232, 207, 222, 196, 205}, {225, 212, 230, 197, 217, 199}, {225, 211, 231, 218, 197, 200}, {215, 198, 227, 204, 219}, {222, 228, 205, 201, 216}, {198, 213, 227, 202, 233, 220}, {228, 214, 201, 234, 203, 221}, {211, 230, 199, 206, 235, 223}, {231, 212, 236, 224, 200, 207}, {209, 229, 227, 213, 204, 241}, {202, 215, 233, 226, 239, 208}, {234, 216, 203, 208, 226, 240}, {232, 210, 242, 214, 228, 205}, {206, 217, 235, 209, 237, 229}, {236, 218, 238, 232, 207, 210}, {211, 212, 231, 243, 230}, {220, 239, 208, 240, 221}, {215, 213, 219, 233, 241, 244}, {242, 245, 222, 214, 216, 234}, {223, 237, 209, 219, 246, 241}, {211, 225, 243, 217, 248, 235}, {225, 212, 218, 243, 249, 236}, {238, 224, 247, 242, 210, 222}, {215, 227, 251, 244, 239, 220}, {245, 252, 228, 216, 221, 240}, {230, 248, 217, 223, 250, 237}, {249, 231, 218, 224, 253, 238}, {223, 235, 250, 229, 246}, {253, 236, 224, 232, 247}, {233, 251, 254, 226, 220, 240}, {252, 234, 254, 226, 239, 221}, {229, 246, 227, 219, 244, 255}, {247, 232, 256, 245, 228, 222}, {225, 231, 230, 248, 249, 257}, {227, 241, 258, 255, 251, 233}, {256, 259, 242, 252, 234, 228}, {237, 250, 229, 241, 262, 255}, {253, 238, 263, 256, 232, 242}, {230, 243, 257, 235, 260, 250}, {243, 231, 257, 261, 236, 253}, {248, 260, 235, 237, 246, 262}, {264, 258, 244, 233, 254, 239}, {259, 245, 265, 254, 234, 240}, {249, 236, 261, 263, 238, 247}, {265, 252, 251, 264, 240, 239}, {246, 262, 241, 258, 267, 244}, {263, 247, 245, 259, 268, 242}, {243, 249, 261, 248, 260, 266}, {264, 267, 255, 251, 244}, {256, 245, 268, 252, 265}, {248, 257, 266, 269, 250, 262}, {257, 249, 266, 270, 253, 263}, {260, 269, 246, 250, 255, 267}, {261, 253, 270, 268, 247, 256}, {265, 271, 258, 267, 251, 254}, {268, 259, 252, 271, 254, 264}, {260, 257, 261, 269, 270}, {262, 269, 271, 264, 258, 255}, {270, 263, 256, 259, 265, 271}, {260, 266, 270, 262, 271, 267}, {266, 261, 269, 271, 263, 268}, {269, 270, 268, 265, 264, 267}

};

boolean frozen= false;

float ptX = 100;
float ptY = 100;
float ptZ = 50;

int step;

float distPtLimit;
float speed;

int oldx = mouseX;
int oldy = mouseY;
float rotx = 0;
float roty = 0;
float zcam = 0;

int scaleVec = 1;
float delta;

float globalMin;
float globalMax;

Vec3D[] vector = new Vec3D [inX.length];
Vec3D init;

//ArrayList<Attractor> attractors = new ArrayList<Attractor>();

Vertex[] vertexArray = new Vertex[inX.length]; //Vertex[] (type)(array)

void setup() {
  size(900, 900, P3D);

  hint(ENABLE_STROKE_PERSPECTIVE);

  cp5 = new ControlP5(this);


  cp5.addSlider("delta")
    .setPosition(40, 40)
    .setRange(0, 100)
    .setSize(200, 20)
    .setValue(50)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;


  cp5.addSlider("distPtLimit")
    .setPosition(40, 70)
    .setRange(0, 500)
    .setSize(200, 20)
    .setValue(250)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;

  cp5.addSlider("speed")
    .setPosition(40, 100)
    .setRange(0, 1)
    .setSize(200, 20)
    .setValue(.5)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;

  cp5.addButton("ResetSim")
    .setValue(0)
    .setPosition(760, 40)
    .setSize(80, 20)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;

  cp5.addButton("PersView")
    .setValue(0)
    .setPosition(760, 70)
    .setSize(80, 20)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;

  cp5.addButton("ResetView")
    .setValue(0)
    .setPosition(760, 100)
    .setSize(80, 20)
    .setColorForeground(color(248, 166, 155))
    .setColorLabel(color(255))
    .setColorBackground(color(70, 70, 70))
    .setColorValue(color(0, 0, 0))
    .setColorActive(color(255))
    ;


  for (int i = 0; i < inX.length; i++) {
    vector[i] = new Vec3D(inX[i]*scaleVec, inY[i]*scaleVec, inZ[i]*scaleVec );
  }

  for (int i = 0; i < inX.length; i++) {
    vertexArray[i] = new Vertex(inX[i]*scaleVec, inY[i]*scaleVec, inZ[i]*scaleVec, i);  //constructor for VErtices
  }

  init = new Vec3D(10, 10, 10);
}


void draw() {
  background(255);

  globalMin = 200;
  globalMax = 1;

  rectMode(CENTER);
  noFill();
  stroke(255);
  strokeWeight(.5);
  //rect(width/2, height/2, 600, 600);

  pushMatrix();

  //println(topo[0].length);


  updateCam();
  strokeWeight(.5);
  //rect(width/2, height/2, 50, 50);

  for (int i = 0; i < inX.length; i++) {
    vertexArray[i].mouseCheck();
    vertexArray[i].Display();
  }

  strokeWeight(2);
  for (int i = 0; i < inX.length; i++) {
    //point( vector[i].x, vector[i].y, vector[i].z);
  }

  for (int i = 0; i < topo[step].length; i++) {
    int a = topo[step][i];

    //line( vector[step].x, vector[step].y, vector[step].z, vector[a].x, vector[a].y, vector[a].z );
  }

  if (frozen == false) {
    ptX = mouseX-430;
    ptY = mouseY-430;
  }

  stroke(255, 0, 0);
  strokeWeight(5);
  //point(ptX, ptY, ptZ);
  stroke(255);
  strokeWeight(2);

  popMatrix();
  text(globalMax, 40, 860);
  text(globalMin, 40, 820);


  if ( frameCount % 5 ==0 ) {
    
    //saveFrame("images/artwork-####.png");
  }
  

}

void keyPressed () {
  saveFrame("sphere-######.png");
}

void updateCam() {
  int newx = mouseX;
  int newy = mouseY;

  translate(width/2, height/2, zcam);
  rotateY(rotx);
  //rotateX(roty+(frameCount*.0008));
   rotateX(roty);
  if ((mousePressed == true) && (mouseY > 300)) {
    rotx = rotx + (oldx-newx)/50.0;
    roty = roty + (oldy-newy)/50.0;
  }
  oldx = newx;
  oldy = newy;
}

void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  zcam = zcam - e*5;
}


public void PersView() {
  rotx = 0.66;
  roty = 1.579;
  zcam = 500;
}

public void ResetView() {
  rotx = 0;
  roty = 0;
  zcam = 200;
}

public void ResetSim() {
  frozen = false;
}




void mousePressed() {


  if (mouseY > 120) {

    frozen = true;
  }
  //trigger a boolean to freeze system
}